using System.Collections;
using OfficeOpenXml;
using System.Collections.Generic;
using System;
using System.Text.RegularExpressions;
namespace excel
{
    public class wordfind : IEnumerable
    {
        ExcelWorksheet worksheet0;//excel表对象
        int number;//单词总数
        public wordfind(ExcelWorksheet worksheet0, int number)
        {
            this.number = number;
            this.worksheet0 = worksheet0;
        }
        public IEnumerator GetEnumerator()
        {
            return new wordfindIE(worksheet0, number);
        }
    }
    public class wordfindIE : IEnumerator
    {
        ExcelWorksheet worksheet0;
        int number;//获取单词总数
        int star = 1;//单词下标
        string[] word;//存储信息
        public wordfindIE(ExcelWorksheet worksheet0, int number)
        {
            this.number = number;
            this.worksheet0 = worksheet0;
            word = new string[4];
        }
        public object Current
        {
            get { return Currentword(); }
        }
        object Currentword()
        {
            if (star > number)
                return null;//处理未查到
            else
            {
                word[0] = worksheet0.Cells[star, 1].Text;//获取单词和音标
                int p = -1;
                foreach (char c in word[0])//去除音标
                {
                    if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
                        p++;
                    else
                        break;
                }
                word[0] = word[0].Substring(0, p + 1);//截取单词
                word[1] = worksheet0.Cells[star, 2].Text;//获得单词意思
                word[2] = worksheet0.Cells[star,3].Text;//获取单词难度值
                word[3] = star.ToString();//返回单词下标
                return word;
                
            }
        }

        bool IEnumerator.MoveNext()
        {
            star++;
            if (star <= number && worksheet0.Cells[star, 1].Value != null)
                return true;
            else
                return false;
        }

        void IEnumerator.Reset()
        {
            star = 1;
        }
    }

    public class SimilarityTool//网上抄的相似度算法 暂时用不上了
    {
        /// <summary>
        /// Compares the two strings based on letter pair matches
        /// </summary>
        /// <param name="str1"></param>
        /// <param name="str2"></param>
        /// <returns>The percentage match from 0.0 to 1.0 where 1.0 is 100%</returns>
        public double CompareStrings(string str1, string str2)
        {
            List<string> pairs1 = WordLetterPairs(str1.ToUpper());
            List<string> pairs2 = WordLetterPairs(str2.ToUpper());

            int intersection = 0;//记录重复的字母个数
            int union = pairs1.Count + pairs2.Count;//记录两个list里字母对的总个数
            for (int i = 0; i < pairs1.Count; i++)
            {
                for (int j = 0; j < pairs2.Count; j++)
                {
                    if (pairs1[i] == pairs2[j])
                    {
                        intersection++;
                        pairs2.RemoveAt(j);//Must remove the match to prevent "GGGG" from appearing to match "GG" with 100% success
                        break;//找到一个重复的字母对就退出
                    }
                }
            }
            return (2.0 * intersection) / union;
        }

        /// <summary>
        /// Gets all letter pairs for each
        /// individual word in the string
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        private List<string> WordLetterPairs(string str)
        {
            List<string> AllPairs = new List<string>();//创建列表用于储存字母对

            // Tokenize the string and put the tokens/words into an array
            string[] Words = Regex.Split(str, @"(\s|-)");//将字符串按空格和'-'分割

            // For each word
            for (int w = 0; w < Words.Length; w++)
            {
                if (!string.IsNullOrEmpty(Words[w]))
                {
                    // Find the pairs of characters
                    String[] PairsInWord = LetterPairs(Words[w]);//把单词分为两个两个的字母,如将
                    for (int p = 0; p < PairsInWord.Length; p++)//apple分为 ap pp pl le
                    {
                        AllPairs.Add(PairsInWord[p]);
                    }
                }
            }
            return AllPairs;
        }

        /// <summary>
        /// Generates an array containing every
        /// two consecutive letters in the input string7     /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        private string[] LetterPairs(string str)
        {
            int numPairs = str.Length - 1;//字母对的个数

            string[] pairs = new string[numPairs];

            for (int i = 0; i < numPairs; i++)
            {
                pairs[i] = str.Substring(i, 2);
            }
            return pairs;
        }
    }

}